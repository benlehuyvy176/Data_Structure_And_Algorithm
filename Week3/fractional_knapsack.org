* Problem Statement
  /The goal of this code problem is to implement an algorithm for the fractional knapsack problem./
  - *Input:* 
      1) A single integer n and capacity W of a knapsack.
      2) The next ùëõ lines define the values and weights of the items.
  - *Constraints:* 
      1) 1 ‚â§ ùëõ ‚â§ 10**3
      2) 0 ‚â§ ùëä ‚â§ 2*10**6
      3) 0 ‚â§ vi ‚â§ 2*10**6
      4) 0 ‚â§ wi ‚â§ 2*10**6
      5) 1 ‚â§ i ‚â§ n
  - *Output:* Output the maximal value of fractions of items that fit into the knapsack.

| *Input*     |                                                   |
|-------------+---------------------------------------------------|
| First Line  | Given an integer n and capacity W                 |
| Next Lines  | the values and weights of the items               |


| *Output*      | Output the maximal value of fractions of items that fit into the knapsack   |
| *Constraints* |      1) 1 ‚â§ ùëõ ‚â§ 10**3                                                       |
|               |      2) 0 ‚â§ ùëä ‚â§ 2*10**6                                                    |
|               |      3) 0 ‚â§ vi ‚â§ 2*10**6                                                    |
|               |      4) 0 ‚â§ wi ‚â§ 2*10**6                                                    |
|               |      5) 1 ‚â§ i ‚â§ n                                                           |

** Example Values

| Input | Output        |
|-------+---------------|
|     0 |             0 |
|     1 |             1 |
|     2 |             2 |
|    28 |             6 |
|   100 |            10 |
|  1111 |           112 |

| Limit  | Value     |
|--------+-----------|
| Time   | 5 seconds |
| Memory | 512 Mb    |


#+BEGIN_SRC python :session change :results none :noweb-ref constants
from datetime import (
    datetime,
    timedelta,
    )
import random
import numpy as np

MAX_TIME = timedelta(seconds = 5)
INPUTS = {
    0: 0,
    1: 1,
    2: 2,
    5: 1,
    10: 1,
    100:10,
    111:12,
    1000:100
}

def check_inputs(implementation, inputs=INPUTS):
    """Checks the inputs with the implementation

    Args:
        implementation: callable to check
        inputs (dict): expected, input pairs
        use_max (bool): if True use the max-range value (too slow for brute force)

    Raises:
        AssertionError: one of the outputs wasn't expected
    """
    for input_values,expected in inputs.items():
        start = datetime.now()
        actual = implementation(input_values)
        assert actual == expected, "Inputs: {} Expected: {} Actual: {}".format(
            input_values,
            expected,
            actual)
        print("Elapsed Time: {}".format(datetime.now() - start))
    return

def money_change(cash):
    coins = 0
    coins += int(cash/10)
    cash = cash % 10
    if cash == 0:
        return coins
    coins += int(cash/5)
    cash = cash % 5
    if cash == 0:
        return coins
    coins += cash
    return coins
#+END_SRC


* Stress Test

#+BEGIN_SRC python :session change :results none :noweb-ref stress-test
def stress_test(implementation, tag,iterations=10):
    """Repeatedly creates random inputs to test the implementation
    
    This compares the output of the implementation against my fibonacci_number version

    Args:
     implementation: callable to test
     tag (str): something to identify the implementation
     iterations (int): the number of times to test (if None runs infinitely)
    """
    true_count = 0
    iteration = 0
    increment = 1 if iterations is not None else 0
    iterations = 1 if iterations is None else iterations
    max_time = timedelta(0)
    while iteration < iterations:
        start = datetime.now()
        true_count += 1
        iteration += increment
        print("***** ({}) Trial: {} *****".format(tag, true_count))
        n = random.randrange(0, 46)
        print("Running Brute Force")
        brute_start = datetime.now()
        output_brute = money_change(n)
        print("Brute Force Time: {}".format(datetime.now() - brute_start))
        print("Running {} implementation".format(tag))
        implementation_start = datetime.now()
        output_implementation = implementation(n)
        implementation_end = datetime.now()
        implementation_elapsed = implementation_end - implementation_start
        if implementation_elapsed > MAX_TIME:
            print("Error Time Exceeded: {}".format(implementation_elapsed))
            break
        print("Implementation Time: {}".format(implementation_elapsed))
        if implementation_elapsed > max_time:
            max_time = implementation_elapsed
        if output_brute != output_implementation:
            print("error: Expected {}, Actual {}", output_brute , output_implementation)
            break
        print("***** Input: {} --- Result: {} *****".format(n,output_brute))
        print("Elapsed time: {}".format(datetime.now() - start))
    print("Max {} time: {}".format(tag, max_time))
    return

print("\n\nNormal method")
stress_test(money_change, tag="Normal", iterations=100)

#+END_SRC
